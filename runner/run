#!/bin/bash

# Usage message function
show_usage() {
    echo "Usage: $0 <number> [-s <value>] [-b <blocks>] [-p <points>] [-t <threads>] [additional options]"
    echo "Arguments:"
    echo "  <number>            Number of Bits to crack"
    echo "  -s <value>          Optional share value (must be <= 10000). Example: 1/200 or <number> 1 => (1/10); 10 => (10/10); 010 => (010/100); etc.."
    echo "  -b <blocks>         Number of blocks (default: 512)"
    echo "  -p <points>         Number of points (default: 1024)"
    echo "  -t <threads>        Number of threads (default: 256)"
    echo "  additional options  Additional arguments passed to the command"
    exit 1
}

# Function to validate and set the share value
set_share_value() {
    local share="$1"

    # If the input contains '/', use it directly
    if [[ "$share" =~ ^[0-9]+/[0-9]+$ ]]; then
        SHARE_VALUE="$share"
    else
        # handle edge cases like 010/100 or 0100/1000
        case "${share}" in
            "10") SHARE_VALUE="${share}/10" ;;
            "010"|"100") SHARE_VALUE="${share}/100" ;;
            "0010"|"0100"|"1000") SHARE_VALUE="${share}/1000" ;;
            "00010"|"00100"|"01000"|"10000") SHARE_VALUE="${share}/10000" ;;
            *)
                # Use the length to determine the divisor
                case "${#share}" in
                    1) SHARE_VALUE="${share}/10" ;;
                    2) SHARE_VALUE="${share}/100" ;;
                    3) SHARE_VALUE="${share}/1000" ;;
                    4) SHARE_VALUE="${share}/10000" ;;
                    *) 
                        echo "Error: Share value must be a number with up to 4 digits or a valid fraction."
                        exit 1
                        ;;
                esac
                ;;
        esac
    fi
}

# Function to parse and process arguments
parse_arguments() {
    if [ $# -lt 1 ]; then
        show_usage
    fi
    
    BITS=$1
    shift
    
    # Set default values for blocks, points, and threads
    D_BLOCKS=512
    D_POINTS=1024
    D_THREADS=256
    
    while (( "$#" )); do
        case "$1" in
            -s)
                if [ -n "$2" ]; then
                    set_share_value "$2"
                    shift 2
                else
                    echo "Error: -s requires a value."
                    exit 1
                fi
                ;;
            -b)
                if [[ "$2" =~ ^[0-9]+$ ]]; then
                    D_BLOCKS="$2"
                    shift 2
                else
                    echo "Error: -b requires a numeric value."
                    exit 1
                fi
                ;;
            -p)
                if [[ "$2" =~ ^[0-9]+$ ]]; then
                    D_POINTS="$2"
                    shift 2
                else
                    echo "Error: -p requires a numeric value."
                    exit 1
                fi
                ;;
            -t)
                if [[ "$2" =~ ^[0-9]+$ ]]; then
                    D_THREADS="$2"
                    shift 2
                else
                    echo "Error: -t requires a numeric value."
                    exit 1
                fi
                ;;
            *)
                ADDITIONAL_ARGS="$ADDITIONAL_ARGS $1"
                shift
                ;;
        esac
    done
}

# Function to extract parameters from params.txt based on the given number
extract_params() {
    local params=$(grep "^$BITS " "$PARAMS_FILE")
    
    if [ -z "$params" ]; then
        echo "No parameters found for number $BITS"
        exit 1
    fi
    
    ADDRESS=$(echo "$params" | awk '{print $2}')
    KEYSPACE=$(echo "$params" | awk '{print $3}')
}

# Function to initialize directories and paths
initialize_paths() {
    SHARE=$(echo "$SHARE_VALUE" | sed 's|/|-|')

    if [[ -z "${DATA_DIR}" ]]; then
      echo "ERROR: DATA_DIR environment variable is not set."
      exit 1
    fi

    if [[ -z "${BIN_PATH}" ]]; then
      echo "ERROR: BIN_PATH environment variable is not set."
      exit 1
    fi

    echo "Using data directory: ${DATA_DIR}"

    OUT_FILE="${DATA_DIR}/out${BITS}.txt"
    CP_FILE="${DATA_DIR}/cp-${BITS}-${SHARE}.txt"
    PARAMS_FILE="${DATA_DIR}/params.txt"
}

# Function to build the command with the provided parameters
build_command() {
    COMMAND="$BIN_PATH $ADDRESS -c -o $OUT_FILE -b $D_BLOCKS -t $D_THREADS -p $D_POINTS --keyspace $KEYSPACE --continue $CP_FILE"
    
    # Append share if provided
    if [ -n "$SHARE_VALUE" ]; then
        COMMAND="$COMMAND --share $SHARE_VALUE"
    fi
    
    # Append additional arguments
    COMMAND="$COMMAND $ADDITIONAL_ARGS"
}

# Function to execute the constructed command
execute_command() {
    echo "Running command: $COMMAND"
    eval "$COMMAND"
}

# Main script execution
main() {
    # Initialized in Dockerfile
    # DATA_DIR=$DATA_DIR
    # BIN_PATH=$BIN_PATH
    
    # Parse and validate arguments
    parse_arguments "$@"

    # Initialize output and checkpoint file paths
    initialize_paths
    
    # Extract address and keyspace for the given number
    extract_params
    
    # Construct and execute the command
    build_command
    execute_command
}

# Run main with all arguments
main "$@"
